// automatically generated by the FlatBuffers compiler, do not modify

package poker.io.codec.protocol;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PROC_PushCard extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static PROC_PushCard getRootAsPROC_PushCard(ByteBuffer _bb) { return getRootAsPROC_PushCard(_bb, new PROC_PushCard()); }
  public static PROC_PushCard getRootAsPROC_PushCard(ByteBuffer _bb, PROC_PushCard obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PROC_PushCard __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PROC_HeadUser headUser() { return headUser(new PROC_HeadUser()); }
  public PROC_HeadUser headUser(PROC_HeadUser obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public PROC_Card cardList(int j) { return cardList(new PROC_Card(), j); }
  public PROC_Card cardList(PROC_Card obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int cardListLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public PROC_Card.Vector cardListVector() { return cardListVector(new PROC_Card.Vector()); }
  public PROC_Card.Vector cardListVector(PROC_Card.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createPROC_PushCard(FlatBufferBuilder builder,
      int headUserOffset,
      int cardListOffset) {
    builder.startTable(2);
    PROC_PushCard.addCardList(builder, cardListOffset);
    PROC_PushCard.addHeadUser(builder, headUserOffset);
    return PROC_PushCard.endPROC_PushCard(builder);
  }

  public static void startPROC_PushCard(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addHeadUser(FlatBufferBuilder builder, int headUserOffset) { builder.addOffset(0, headUserOffset, 0); }
  public static void addCardList(FlatBufferBuilder builder, int cardListOffset) { builder.addOffset(1, cardListOffset, 0); }
  public static int createCardListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCardListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endPROC_PushCard(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PROC_PushCard get(int j) { return get(new PROC_PushCard(), j); }
    public PROC_PushCard get(PROC_PushCard obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

