// automatically generated by the FlatBuffers compiler, do not modify

package poker.io.codec.protocol;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PROC_JACKPOT extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static PROC_JACKPOT getRootAsPROC_JACKPOT(ByteBuffer _bb) { return getRootAsPROC_JACKPOT(_bb, new PROC_JACKPOT()); }
  public static PROC_JACKPOT getRootAsPROC_JACKPOT(ByteBuffer _bb, PROC_JACKPOT obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PROC_JACKPOT __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int coin() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateCoin(int coin) { int o = __offset(4); if (o != 0) { bb.putInt(o + bb_pos, coin); return true; } else { return false; } }
  public boolean isFire() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean mutateIsFire(boolean isFire) { int o = __offset(6); if (o != 0) { bb.put(o + bb_pos, (byte)(isFire ? 1 : 0)); return true; } else { return false; } }
  public PROC_User fireUser() { return fireUser(new PROC_User()); }
  public PROC_User fireUser(PROC_User obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public String fireMsg() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fireMsgAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer fireMsgInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }

  public static int createPROC_JACKPOT(FlatBufferBuilder builder,
      int coin,
      boolean isFire,
      int fireUserOffset,
      int fireMsgOffset) {
    builder.startTable(4);
    PROC_JACKPOT.addFireMsg(builder, fireMsgOffset);
    PROC_JACKPOT.addFireUser(builder, fireUserOffset);
    PROC_JACKPOT.addCoin(builder, coin);
    PROC_JACKPOT.addIsFire(builder, isFire);
    return PROC_JACKPOT.endPROC_JACKPOT(builder);
  }

  public static void startPROC_JACKPOT(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addCoin(FlatBufferBuilder builder, int coin) { builder.addInt(0, coin, 0); }
  public static void addIsFire(FlatBufferBuilder builder, boolean isFire) { builder.addBoolean(1, isFire, false); }
  public static void addFireUser(FlatBufferBuilder builder, int fireUserOffset) { builder.addOffset(2, fireUserOffset, 0); }
  public static void addFireMsg(FlatBufferBuilder builder, int fireMsgOffset) { builder.addOffset(3, fireMsgOffset, 0); }
  public static int endPROC_JACKPOT(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PROC_JACKPOT get(int j) { return get(new PROC_JACKPOT(), j); }
    public PROC_JACKPOT get(PROC_JACKPOT obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

