package poker.io.codec.protocol;// automatically generated by the FlatBuffers compiler, do not modify


import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PROC_Batting extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static PROC_Batting getRootAsPROC_Batting(ByteBuffer _bb) { return getRootAsPROC_Batting(_bb, new PROC_Batting()); }
  public static PROC_Batting getRootAsPROC_Batting(ByteBuffer _bb, PROC_Batting obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PROC_Batting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PROC_User curUser() { return curUser(new PROC_User()); }
  public PROC_User curUser(PROC_User obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public byte battingType() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean mutateBattingType(byte battingType) { int o = __offset(6); if (o != 0) { bb.put(o + bb_pos, battingType); return true; } else { return false; } }
  public PROC_HeadUser headUser() { return headUser(new PROC_HeadUser()); }
  public PROC_HeadUser headUser(PROC_HeadUser obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createPROC_Batting(FlatBufferBuilder builder,
      int curUserOffset,
      byte battingType,
      int headUserOffset) {
    builder.startTable(3);
    PROC_Batting.addHeadUser(builder, headUserOffset);
    PROC_Batting.addCurUser(builder, curUserOffset);
    PROC_Batting.addBattingType(builder, battingType);
    return PROC_Batting.endPROC_Batting(builder);
  }

  public static void startPROC_Batting(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addCurUser(FlatBufferBuilder builder, int curUserOffset) { builder.addOffset(0, curUserOffset, 0); }
  public static void addBattingType(FlatBufferBuilder builder, byte battingType) { builder.addByte(1, battingType, 0); }
  public static void addHeadUser(FlatBufferBuilder builder, int headUserOffset) { builder.addOffset(2, headUserOffset, 0); }
  public static int endPROC_Batting(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PROC_Batting get(int j) { return get(new PROC_Batting(), j); }
    public PROC_Batting get(PROC_Batting obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

