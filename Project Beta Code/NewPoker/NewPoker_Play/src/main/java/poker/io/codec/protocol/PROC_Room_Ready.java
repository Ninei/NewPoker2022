// automatically generated by the FlatBuffers compiler, do not modify

package poker.io.codec.protocol;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PROC_Room_Ready extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static PROC_Room_Ready getRootAsPROC_Room_Ready(ByteBuffer _bb) { return getRootAsPROC_Room_Ready(_bb, new PROC_Room_Ready()); }
  public static PROC_Room_Ready getRootAsPROC_Room_Ready(ByteBuffer _bb, PROC_Room_Ready obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PROC_Room_Ready __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean isReady() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean mutateIsReady(boolean isReady) { int o = __offset(4); if (o != 0) { bb.put(o + bb_pos, (byte)(isReady ? 1 : 0)); return true; } else { return false; } }

  public static int createPROC_Room_Ready(FlatBufferBuilder builder,
      boolean isReady) {
    builder.startTable(1);
    PROC_Room_Ready.addIsReady(builder, isReady);
    return PROC_Room_Ready.endPROC_Room_Ready(builder);
  }

  public static void startPROC_Room_Ready(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addIsReady(FlatBufferBuilder builder, boolean isReady) { builder.addBoolean(0, isReady, false); }
  public static int endPROC_Room_Ready(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PROC_Room_Ready get(int j) { return get(new PROC_Room_Ready(), j); }
    public PROC_Room_Ready get(PROC_Room_Ready obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

