// automatically generated by the FlatBuffers compiler, do not modify

package poker.io.codec.protocol;

import com.google.flatbuffers.*;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PROC_Card extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static PROC_Card getRootAsPROC_Card(ByteBuffer _bb) { return getRootAsPROC_Card(_bb, new PROC_Card()); }
  public static PROC_Card getRootAsPROC_Card(ByteBuffer _bb, PROC_Card obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PROC_Card __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String userId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer userIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer userIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String cardRank() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cardRankAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer cardRankInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String cardList(int j) { int o = __offset(8); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int cardListLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public StringVector cardListVector() { return cardListVector(new StringVector()); }
  public StringVector cardListVector(StringVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createPROC_Card(FlatBufferBuilder builder,
      int userIdOffset,
      int cardRankOffset,
      int cardListOffset) {
    builder.startTable(3);
    PROC_Card.addCardList(builder, cardListOffset);
    PROC_Card.addCardRank(builder, cardRankOffset);
    PROC_Card.addUserId(builder, userIdOffset);
    return PROC_Card.endPROC_Card(builder);
  }

  public static void startPROC_Card(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addUserId(FlatBufferBuilder builder, int userIdOffset) { builder.addOffset(0, userIdOffset, 0); }
  public static void addCardRank(FlatBufferBuilder builder, int cardRankOffset) { builder.addOffset(1, cardRankOffset, 0); }
  public static void addCardList(FlatBufferBuilder builder, int cardListOffset) { builder.addOffset(2, cardListOffset, 0); }
  public static int createCardListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCardListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endPROC_Card(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PROC_Card get(int j) { return get(new PROC_Card(), j); }
    public PROC_Card get(PROC_Card obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

