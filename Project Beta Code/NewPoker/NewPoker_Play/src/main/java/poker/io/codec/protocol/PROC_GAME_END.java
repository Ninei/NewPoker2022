// automatically generated by the FlatBuffers compiler, do not modify

package poker.io.codec.protocol;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PROC_GAME_END extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static PROC_GAME_END getRootAsPROC_GAME_END(ByteBuffer _bb) { return getRootAsPROC_GAME_END(_bb, new PROC_GAME_END()); }
  public static PROC_GAME_END getRootAsPROC_GAME_END(ByteBuffer _bb, PROC_GAME_END obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PROC_GAME_END __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PROC_User winner() { return winner(new PROC_User()); }
  public PROC_User winner(PROC_User obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public byte handRank() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean mutateHandRank(byte handRank) { int o = __offset(6); if (o != 0) { bb.put(o + bb_pos, handRank); return true; } else { return false; } }
  public PROC_Card markCardList(int j) { return markCardList(new PROC_Card(), j); }
  public PROC_Card markCardList(PROC_Card obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int markCardListLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public PROC_Card.Vector markCardListVector() { return markCardListVector(new PROC_Card.Vector()); }
  public PROC_Card.Vector markCardListVector(PROC_Card.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createPROC_GAME_END(FlatBufferBuilder builder,
      int winnerOffset,
      byte handRank,
      int markCardListOffset) {
    builder.startTable(3);
    PROC_GAME_END.addMarkCardList(builder, markCardListOffset);
    PROC_GAME_END.addWinner(builder, winnerOffset);
    PROC_GAME_END.addHandRank(builder, handRank);
    return PROC_GAME_END.endPROC_GAME_END(builder);
  }

  public static void startPROC_GAME_END(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addWinner(FlatBufferBuilder builder, int winnerOffset) { builder.addOffset(0, winnerOffset, 0); }
  public static void addHandRank(FlatBufferBuilder builder, byte handRank) { builder.addByte(1, handRank, 0); }
  public static void addMarkCardList(FlatBufferBuilder builder, int markCardListOffset) { builder.addOffset(2, markCardListOffset, 0); }
  public static int createMarkCardListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMarkCardListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endPROC_GAME_END(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PROC_GAME_END get(int j) { return get(new PROC_GAME_END(), j); }
    public PROC_GAME_END get(PROC_GAME_END obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

