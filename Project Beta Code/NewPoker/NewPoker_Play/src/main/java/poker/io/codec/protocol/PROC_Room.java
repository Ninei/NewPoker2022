// automatically generated by the FlatBuffers compiler, do not modify

package poker.io.codec.protocol;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PROC_Room extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static PROC_Room getRootAsPROC_Room(ByteBuffer _bb) { return getRootAsPROC_Room(_bb, new PROC_Room()); }
  public static PROC_Room getRootAsPROC_Room(ByteBuffer _bb, PROC_Room obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PROC_Room __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public boolean isPlaying() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean mutateIsPlaying(boolean isPlaying) { int o = __offset(8); if (o != 0) { bb.put(o + bb_pos, (byte)(isPlaying ? 1 : 0)); return true; } else { return false; } }
  public PROC_User userList(int j) { return userList(new PROC_User(), j); }
  public PROC_User userList(PROC_User obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int userListLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public PROC_User.Vector userListVector() { return userListVector(new PROC_User.Vector()); }
  public PROC_User.Vector userListVector(PROC_User.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createPROC_Room(FlatBufferBuilder builder,
      int idOffset,
      int nameOffset,
      boolean isPlaying,
      int userListOffset) {
    builder.startTable(4);
    PROC_Room.addUserList(builder, userListOffset);
    PROC_Room.addName(builder, nameOffset);
    PROC_Room.addId(builder, idOffset);
    PROC_Room.addIsPlaying(builder, isPlaying);
    return PROC_Room.endPROC_Room(builder);
  }

  public static void startPROC_Room(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static void addIsPlaying(FlatBufferBuilder builder, boolean isPlaying) { builder.addBoolean(2, isPlaying, false); }
  public static void addUserList(FlatBufferBuilder builder, int userListOffset) { builder.addOffset(3, userListOffset, 0); }
  public static int createUserListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startUserListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endPROC_Room(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PROC_Room get(int j) { return get(new PROC_Room(), j); }
    public PROC_Room get(PROC_Room obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

