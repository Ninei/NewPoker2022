// automatically generated by the FlatBuffers compiler, do not modify

package ache.io.codec.protocol;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PROC_ImageList extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static PROC_ImageList getRootAsPROC_ImageList(ByteBuffer _bb) { return getRootAsPROC_ImageList(_bb, new PROC_ImageList()); }
  public static PROC_ImageList getRootAsPROC_ImageList(ByteBuffer _bb, PROC_ImageList obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PROC_ImageList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PROC_Image imgList(int j) { return imgList(new PROC_Image(), j); }
  public PROC_Image imgList(PROC_Image obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int imgListLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public PROC_Image.Vector imgListVector() { return imgListVector(new PROC_Image.Vector()); }
  public PROC_Image.Vector imgListVector(PROC_Image.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public double timeStamp() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public boolean mutateTimeStamp(double timeStamp) { int o = __offset(6); if (o != 0) { bb.putDouble(o + bb_pos, timeStamp); return true; } else { return false; } }

  public static int createPROC_ImageList(FlatBufferBuilder builder,
      int imgListOffset,
      double timeStamp) {
    builder.startTable(2);
    PROC_ImageList.addTimeStamp(builder, timeStamp);
    PROC_ImageList.addImgList(builder, imgListOffset);
    return PROC_ImageList.endPROC_ImageList(builder);
  }

  public static void startPROC_ImageList(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addImgList(FlatBufferBuilder builder, int imgListOffset) { builder.addOffset(0, imgListOffset, 0); }
  public static int createImgListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startImgListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTimeStamp(FlatBufferBuilder builder, double timeStamp) { builder.addDouble(1, timeStamp, 0.0); }
  public static int endPROC_ImageList(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PROC_ImageList get(int j) { return get(new PROC_ImageList(), j); }
    public PROC_ImageList get(PROC_ImageList obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

