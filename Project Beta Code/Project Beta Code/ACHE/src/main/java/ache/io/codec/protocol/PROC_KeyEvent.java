// automatically generated by the FlatBuffers compiler, do not modify

package ache.io.codec.protocol;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PROC_KeyEvent extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static PROC_KeyEvent getRootAsPROC_KeyEvent(ByteBuffer _bb) { return getRootAsPROC_KeyEvent(_bb, new PROC_KeyEvent()); }
  public static PROC_KeyEvent getRootAsPROC_KeyEvent(ByteBuffer _bb, PROC_KeyEvent obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PROC_KeyEvent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int code() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateCode(int code) { int o = __offset(4); if (o != 0) { bb.putInt(o + bb_pos, code); return true; } else { return false; } }
  public String encCode() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer encCodeAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer encCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public byte event() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean mutateEvent(byte event) { int o = __offset(8); if (o != 0) { bb.put(o + bb_pos, event); return true; } else { return false; } }

  public static int createPROC_KeyEvent(FlatBufferBuilder builder,
      int code,
      int encCodeOffset,
      byte event) {
    builder.startTable(3);
    PROC_KeyEvent.addEncCode(builder, encCodeOffset);
    PROC_KeyEvent.addCode(builder, code);
    PROC_KeyEvent.addEvent(builder, event);
    return PROC_KeyEvent.endPROC_KeyEvent(builder);
  }

  public static void startPROC_KeyEvent(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addCode(FlatBufferBuilder builder, int code) { builder.addInt(0, code, 0); }
  public static void addEncCode(FlatBufferBuilder builder, int encCodeOffset) { builder.addOffset(1, encCodeOffset, 0); }
  public static void addEvent(FlatBufferBuilder builder, byte event) { builder.addByte(2, event, 0); }
  public static int endPROC_KeyEvent(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PROC_KeyEvent get(int j) { return get(new PROC_KeyEvent(), j); }
    public PROC_KeyEvent get(PROC_KeyEvent obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

