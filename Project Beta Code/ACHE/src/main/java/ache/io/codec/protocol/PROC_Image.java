// automatically generated by the FlatBuffers compiler, do not modify

package ache.io.codec.protocol;

import com.google.flatbuffers.*;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PROC_Image extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static PROC_Image getRootAsPROC_Image(ByteBuffer _bb) { return getRootAsPROC_Image(_bb, new PROC_Image()); }
  public static PROC_Image getRootAsPROC_Image(ByteBuffer _bb, PROC_Image obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PROC_Image __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int x() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateX(int x) { int o = __offset(4); if (o != 0) { bb.putInt(o + bb_pos, x); return true; } else { return false; } }
  public int y() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateY(int y) { int o = __offset(6); if (o != 0) { bb.putInt(o + bb_pos, y); return true; } else { return false; } }
  public int w() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateW(int w) { int o = __offset(8); if (o != 0) { bb.putInt(o + bb_pos, w); return true; } else { return false; } }
  public int h() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateH(int h) { int o = __offset(10); if (o != 0) { bb.putInt(o + bb_pos, h); return true; } else { return false; } }
  public byte buffer(int j) { int o = __offset(12); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int bufferLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector bufferVector() { return bufferVector(new ByteVector()); }
  public ByteVector bufferVector(ByteVector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer bufferAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer bufferInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  public boolean mutateBuffer(int j, byte buffer) { int o = __offset(12); if (o != 0) { bb.put(__vector(o) + j * 1, buffer); return true; } else { return false; } }
  public String base64() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer base64AsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer base64InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }

  public static int createPROC_Image(FlatBufferBuilder builder,
      int x,
      int y,
      int w,
      int h,
      int bufferOffset,
      int base64Offset) {
    builder.startTable(6);
    PROC_Image.addBase64(builder, base64Offset);
    PROC_Image.addBuffer(builder, bufferOffset);
    PROC_Image.addH(builder, h);
    PROC_Image.addW(builder, w);
    PROC_Image.addY(builder, y);
    PROC_Image.addX(builder, x);
    return PROC_Image.endPROC_Image(builder);
  }

  public static void startPROC_Image(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addX(FlatBufferBuilder builder, int x) { builder.addInt(0, x, 0); }
  public static void addY(FlatBufferBuilder builder, int y) { builder.addInt(1, y, 0); }
  public static void addW(FlatBufferBuilder builder, int w) { builder.addInt(2, w, 0); }
  public static void addH(FlatBufferBuilder builder, int h) { builder.addInt(3, h, 0); }
  public static void addBuffer(FlatBufferBuilder builder, int bufferOffset) { builder.addOffset(4, bufferOffset, 0); }
  public static int createBufferVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createBufferVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startBufferVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addBase64(FlatBufferBuilder builder, int base64Offset) { builder.addOffset(5, base64Offset, 0); }
  public static int endPROC_Image(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PROC_Image get(int j) { return get(new PROC_Image(), j); }
    public PROC_Image get(PROC_Image obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

