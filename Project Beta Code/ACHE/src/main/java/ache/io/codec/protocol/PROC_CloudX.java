// automatically generated by the FlatBuffers compiler, do not modify

package ache.io.codec.protocol;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PROC_CloudX extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static PROC_CloudX getRootAsPROC_CloudX(ByteBuffer _bb) { return getRootAsPROC_CloudX(_bb, new PROC_CloudX()); }
  public static PROC_CloudX getRootAsPROC_CloudX(ByteBuffer _bb, PROC_CloudX obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PROC_CloudX __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte procTableType() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table procTable(Table obj) { int o = __offset(6); return o != 0 ? __union(obj, o + bb_pos) : null; }

  public static int createPROC_CloudX(FlatBufferBuilder builder,
      byte procTable_type,
      int procTableOffset) {
    builder.startTable(2);
    PROC_CloudX.addProcTable(builder, procTableOffset);
    PROC_CloudX.addProcTableType(builder, procTable_type);
    return PROC_CloudX.endPROC_CloudX(builder);
  }

  public static void startPROC_CloudX(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addProcTableType(FlatBufferBuilder builder, byte procTableType) { builder.addByte(0, procTableType, 0); }
  public static void addProcTable(FlatBufferBuilder builder, int procTableOffset) { builder.addOffset(1, procTableOffset, 0); }
  public static int endPROC_CloudX(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishPROC_CloudXBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedPROC_CloudXBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PROC_CloudX get(int j) { return get(new PROC_CloudX(), j); }
    public PROC_CloudX get(PROC_CloudX obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

